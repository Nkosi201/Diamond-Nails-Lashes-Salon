from flask import Flask, request, jsonify
from flask_cors import CORS
import sqlite3
import re
from datetime import datetime

app = Flask(__name__)
CORS(app, resources={r"/api/*": {"origins": "https://diamondnails.co.za"}})

# Initialize SQLite database
def init_db():
    conn = sqlite3.connect('consultations.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS consultations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            full_name TEXT NOT NULL,
            email TEXT NOT NULL,
            phone TEXT,
            service TEXT NOT NULL,
            notes TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

# Validate email format
def is_valid_email(email):
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

# Validate phone number (optional, but if provided, should be reasonable)
def is_valid_phone(phone):
    if not phone:
        return True
    pattern = r'^\+?[\d\s-]{10,}$'
    return re.match(pattern, phone) is not None

@app.route('/api/consultations', methods=['POST'])
def create_consultation():
    try:
        data = request.get_json()
        if not data:
            return jsonify({'errors': ['No data provided']}), 400

        full_name = data.get('full_name', '').strip()
        email = data.get('email', '').strip()
        phone = data.get('phone', '').strip()
        service = data.get('service', '').strip()
        notes = data.get('notes', '').strip()

        # Validation
        errors = []
        if not full_name:
            errors.append('Full name is required.')
        if not email or not is_valid_email(email):
            errors.append('A valid email is required.')
        if not service:
            errors.append('Please select a service.')
        if phone and not is_valid_phone(phone):
            errors.append('Please provide a valid phone number.')
        
        if errors:
            return jsonify({'errors': errors}), 400

        # Insert into database
        conn = sqlite3.connect('consultations.db')
        c = conn.cursor()
        c.execute('''
            INSERT INTO consultations (full_name, email, phone, service, notes)
            VALUES (?, ?, ?, ?, ?)
        ''', (full_name, email, phone, service, notes))
        conn.commit()
        conn.close()

        return jsonify({'message': 'Consultation request received successfully.'}), 201

    except sqlite3.Error as e:
        return jsonify({'errors': ['Database error: ' + str(e)]}), 500
    except Exception as e:
        return jsonify({'errors': ['Server error: ' + str(e)]}), 500

if __name__ == '__main__':
    init_db()
    app.run(host='0.0.0.0', port=5000, debug=True)